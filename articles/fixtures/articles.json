[
    {
        "pk": 15,
        "model": "articles.article",
        "fields": {
            "title": "Sawtooth and triangle wave generator",
            "created": "2010-08-08T11:52:06Z",
            "modified": "2010-08-08T11:52:06Z",
            "content": "TriangleGenerator class can be used to create sawtooth and triangle waveforms. The default behaviour is to generate a sawtooth wave, where a rising slope fills the entire period of a signal. However, it can be changed by calling setWidth(), which sets width of the rising slope as a fraction of period. For example, setting slope width of 0.5 results in a symmetrical triangle wave.\r\n\r\n    :::c++\r\n    #include \"aquila/source/generator/TriangleGenerator.h\"\r\n    #include \"aquila/tools/TextPlot.h\"\r\n\r\n    int main(int argc, char *argv[])\r\n    {\r\n        Aquila::TriangleGenerator generator(1000);\r\n        generator.setFrequency(25).setAmplitude(255).generate(64);\r\n        Aquila::TextPlot plot(\"Sawtooth wave\");\r\n        plot.plot(generator);\r\n\r\n        generator.setWidth(0.5).generate(64);\r\n        plot.setTitle(\"Triangle wave, slope width = 50%\");\r\n        plot.plot(generator);\r\n\r\n        generator.setWidth(0.18).generate(64);\r\n        plot.setTitle(\"Triangle wave, slope width = 18%\");\r\n        plot.plot(generator);\r\n\r\n        return 0;\r\n    }\r\n\r\nOutput:\r\n\r\n    Sawtooth wave\r\n                                         ***\r\n                                       **\r\n                                    ***\r\n                                  **\r\n                               ***\r\n                             **\r\n                          ***                                     **\r\n                        **                                      **\r\n                      **                                      **\r\n                   ***                                     ***\r\n                 **                                      **\r\n              ***                                     ***\r\n            **                                      **\r\n         ***                                     ***\r\n       **                                      **\r\n    ***                                     ***\r\n\r\n    Triangle wave, slope width = 50%\r\n                       ***                                     ***\r\n                      *   *                                   *   *\r\n                     *     *                                 *     *\r\n                    *       *                               *\r\n                  **         **                           **\r\n                 *             *                         *\r\n                *               *                       *\r\n               *                 *                     *\r\n             **                   **                 **\r\n            *                       *               *\r\n           *                         *             *\r\n          *                           *           *\r\n        **                             **       **\r\n       *                                 *     *\r\n      *                                   *   *\r\n    **                                     ***\r\n\r\n    Triangle wave, slope width = 18%\r\n           ***                                     ***\r\n              **                                      **\r\n          *     **                                *     **\r\n                  **                                      **\r\n         *          **                           *          **\r\n                      **                                      **\r\n        *               **                      *               **\r\n                          **                                      **\r\n                            **\r\n       *                      **               *\r\n                                **\r\n      *                           **          *\r\n                                    **\r\n     *                                **     *\r\n                                        **\r\n    *                                     ***\r\n",
            "_content_rendered": "<p>TriangleGenerator class can be used to create sawtooth and triangle waveforms. The default behaviour is to generate a sawtooth wave, where a rising slope fills the entire period of a signal. However, it can be changed by calling setWidth(), which sets width of the rising slope as a fraction of period. For example, setting slope width of 0.5 results in a symmetrical triangle wave.</p>\n<div class=\"highlight\"><pre><span class=\"cp\">#include &quot;aquila/source/generator/TriangleGenerator.h&quot;</span>\n<span class=\"cp\">#include &quot;aquila/tools/TextPlot.h&quot;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">argv</span><span class=\"p\">[])</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">Aquila</span><span class=\"o\">::</span><span class=\"n\">TriangleGenerator</span> <span class=\"n\">generator</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">);</span>\n    <span class=\"n\">generator</span><span class=\"p\">.</span><span class=\"n\">setFrequency</span><span class=\"p\">(</span><span class=\"mi\">25</span><span class=\"p\">).</span><span class=\"n\">setAmplitude</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">).</span><span class=\"n\">generate</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">);</span>\n    <span class=\"n\">Aquila</span><span class=\"o\">::</span><span class=\"n\">TextPlot</span> <span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"s\">&quot;Sawtooth wave&quot;</span><span class=\"p\">);</span>\n    <span class=\"n\">plot</span><span class=\"p\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">generator</span><span class=\"p\">);</span>\n\n    <span class=\"n\">generator</span><span class=\"p\">.</span><span class=\"n\">setWidth</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">).</span><span class=\"n\">generate</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">);</span>\n    <span class=\"n\">plot</span><span class=\"p\">.</span><span class=\"n\">setTitle</span><span class=\"p\">(</span><span class=\"s\">&quot;Triangle wave, slope width = 50%&quot;</span><span class=\"p\">);</span>\n    <span class=\"n\">plot</span><span class=\"p\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">generator</span><span class=\"p\">);</span>\n\n    <span class=\"n\">generator</span><span class=\"p\">.</span><span class=\"n\">setWidth</span><span class=\"p\">(</span><span class=\"mf\">0.18</span><span class=\"p\">).</span><span class=\"n\">generate</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">);</span>\n    <span class=\"n\">plot</span><span class=\"p\">.</span><span class=\"n\">setTitle</span><span class=\"p\">(</span><span class=\"s\">&quot;Triangle wave, slope width = 18%&quot;</span><span class=\"p\">);</span>\n    <span class=\"n\">plot</span><span class=\"p\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">generator</span><span class=\"p\">);</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>Output:</p>\n<div class=\"highlight\"><pre><span class=\"n\">Sawtooth</span> <span class=\"n\">wave</span>\n                                     <span class=\"o\">***</span>\n                                   <span class=\"o\">**</span>\n                                <span class=\"o\">***</span>\n                              <span class=\"o\">**</span>\n                           <span class=\"o\">***</span>\n                         <span class=\"o\">**</span>\n                      <span class=\"o\">***</span>                                     <span class=\"o\">**</span>\n                    <span class=\"o\">**</span>                                      <span class=\"o\">**</span>\n                  <span class=\"o\">**</span>                                      <span class=\"o\">**</span>\n               <span class=\"o\">***</span>                                     <span class=\"o\">***</span>\n             <span class=\"o\">**</span>                                      <span class=\"o\">**</span>\n          <span class=\"o\">***</span>                                     <span class=\"o\">***</span>\n        <span class=\"o\">**</span>                                      <span class=\"o\">**</span>\n     <span class=\"o\">***</span>                                     <span class=\"o\">***</span>\n   <span class=\"o\">**</span>                                      <span class=\"o\">**</span>\n<span class=\"o\">***</span>                                     <span class=\"o\">***</span>\n\n<span class=\"n\">Triangle</span> <span class=\"n\">wave</span><span class=\"p\">,</span> <span class=\"n\">slope</span> <span class=\"n\">width</span> <span class=\"p\">=</span> 50<span class=\"c\">%</span>\n                   <span class=\"o\">***</span>                                     <span class=\"o\">***</span>\n                  <span class=\"o\">*</span>   <span class=\"o\">*</span>                                   <span class=\"o\">*</span>   <span class=\"o\">*</span>\n                 <span class=\"o\">*</span>     <span class=\"o\">*</span>                                 <span class=\"o\">*</span>     <span class=\"o\">*</span>\n                <span class=\"o\">*</span>       <span class=\"o\">*</span>                               <span class=\"o\">*</span>\n              <span class=\"o\">**</span>         <span class=\"o\">**</span>                           <span class=\"o\">**</span>\n             <span class=\"o\">*</span>             <span class=\"o\">*</span>                         <span class=\"o\">*</span>\n            <span class=\"o\">*</span>               <span class=\"o\">*</span>                       <span class=\"o\">*</span>\n           <span class=\"o\">*</span>                 <span class=\"o\">*</span>                     <span class=\"o\">*</span>\n         <span class=\"o\">**</span>                   <span class=\"o\">**</span>                 <span class=\"o\">**</span>\n        <span class=\"o\">*</span>                       <span class=\"o\">*</span>               <span class=\"o\">*</span>\n       <span class=\"o\">*</span>                         <span class=\"o\">*</span>             <span class=\"o\">*</span>\n      <span class=\"o\">*</span>                           <span class=\"o\">*</span>           <span class=\"o\">*</span>\n    <span class=\"o\">**</span>                             <span class=\"o\">**</span>       <span class=\"o\">**</span>\n   <span class=\"o\">*</span>                                 <span class=\"o\">*</span>     <span class=\"o\">*</span>\n  <span class=\"o\">*</span>                                   <span class=\"o\">*</span>   <span class=\"o\">*</span>\n<span class=\"o\">**</span>                                     <span class=\"o\">***</span>\n\n<span class=\"n\">Triangle</span> <span class=\"n\">wave</span><span class=\"p\">,</span> <span class=\"n\">slope</span> <span class=\"n\">width</span> <span class=\"p\">=</span> 18<span class=\"c\">%</span>\n       <span class=\"o\">***</span>                                     <span class=\"o\">***</span>\n          <span class=\"o\">**</span>                                      <span class=\"o\">**</span>\n      <span class=\"o\">*</span>     <span class=\"o\">**</span>                                <span class=\"o\">*</span>     <span class=\"o\">**</span>\n              <span class=\"o\">**</span>                                      <span class=\"o\">**</span>\n     <span class=\"o\">*</span>          <span class=\"o\">**</span>                           <span class=\"o\">*</span>          <span class=\"o\">**</span>\n                  <span class=\"o\">**</span>                                      <span class=\"o\">**</span>\n    <span class=\"o\">*</span>               <span class=\"o\">**</span>                      <span class=\"o\">*</span>               <span class=\"o\">**</span>\n                      <span class=\"o\">**</span>                                      <span class=\"o\">**</span>\n                        <span class=\"o\">**</span>\n   <span class=\"o\">*</span>                      <span class=\"o\">**</span>               <span class=\"o\">*</span>\n                            <span class=\"o\">**</span>\n  <span class=\"o\">*</span>                           <span class=\"o\">**</span>          <span class=\"o\">*</span>\n                                <span class=\"o\">**</span>\n <span class=\"o\">*</span>                                <span class=\"o\">**</span>     <span class=\"o\">*</span>\n                                    <span class=\"o\">**</span>\n<span class=\"o\">*</span>                                     <span class=\"o\">***</span>\n</pre></div>",
            "slug": "sawtooth-and-triangle-wave-generator",
            "content_markup_type": "markdown"
        }
    },
    {
        "pk": 14,
        "model": "articles.article",
        "fields": {
            "title": "Square wave generator",
            "created": "2010-08-07T23:41:21Z",
            "modified": "2012-07-08T23:41:21Z",
            "content": "The following code demonstrates how to use SquareGenerator class. As it is derived from SignalSource, it can be directly plotted with TextPlot. The square wave generator supports setting duty cycle as a fraction of period in which signal values are positive.\r\n\r\n    :::c++\r\n    #include \"aquila/source/generator/SquareGenerator.h\"\r\n    #include \"aquila/tools/TextPlot.h\"\r\n    \r\n    int main(int argc, char *argv[])\r\n    {\r\n        Aquila::SquareGenerator generator(1000);\r\n        generator.setFrequency(125).setAmplitude(255).generate(64);\r\n        Aquila::TextPlot plot(\"Square wave\");\r\n        plot.plot(generator);\r\n    \r\n        generator.setDuty(0.25).generate(64);\r\n        plot.setTitle(\"Square wave, duty cycle = 25%\");\r\n        plot.plot(generator);\r\n    \r\n        generator.setDuty(0.75).generate(64);\r\n        plot.setTitle(\"Square wave, duty cycle = 75%\");\r\n        plot.plot(generator);\r\n    \r\n        return 0;\r\n    }\r\n\r\nOutput:\r\n\r\n\r\n    Square wave\r\n    ****    ****    ****    ****    ****    ****    ****    ****    \r\n                                                                    \r\n                                                                    \r\n                                                                    \r\n                                                                    \r\n                                                                    \r\n                                                                    \r\n                                                                    \r\n                                                                    \r\n                                                                    \r\n                                                                    \r\n                                                                    \r\n                                                                    \r\n                                                                    \r\n                                                                    \r\n        ****    ****    ****    ****    ****    ****    ****    ****\r\n\r\n    Square wave, duty cycle = 25%\r\n    **      **      **      **      **      **      **      **      \r\n                                                                    \r\n                                                                    \r\n                                                                    \r\n                                                                    \r\n                                                                    \r\n                                                                    \r\n                                                                    \r\n                                                                    \r\n                                                                    \r\n                                                                    \r\n                                                                    \r\n                                                                    \r\n                                                                    \r\n                                                                    \r\n      ******  ******  ******  ******  ******  ******  ******  ******\r\n\r\n    Square wave, duty cycle = 75%\r\n    ******  ******  ******  ******  ******  ******  ******  ******  \r\n                                                                    \r\n                                                                    \r\n                                                                    \r\n                                                                    \r\n                                                                    \r\n                                                                    \r\n                                                                    \r\n                                                                    \r\n                                                                    \r\n                                                                    \r\n                                                                    \r\n                                                                    \r\n                                                                    \r\n                                                                    \r\n          **      **      **      **      **      **      **      **\r\n",
            "_content_rendered": "<p>The following code demonstrates how to use SquareGenerator class. As it is derived from SignalSource, it can be directly plotted with TextPlot. The square wave generator supports setting duty cycle as a fraction of period in which signal values are positive.</p>\n<div class=\"highlight\"><pre><span class=\"cp\">#include &quot;aquila/source/generator/SquareGenerator.h&quot;</span>\n<span class=\"cp\">#include &quot;aquila/tools/TextPlot.h&quot;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">argv</span><span class=\"p\">[])</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">Aquila</span><span class=\"o\">::</span><span class=\"n\">SquareGenerator</span> <span class=\"n\">generator</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">);</span>\n    <span class=\"n\">generator</span><span class=\"p\">.</span><span class=\"n\">setFrequency</span><span class=\"p\">(</span><span class=\"mi\">125</span><span class=\"p\">).</span><span class=\"n\">setAmplitude</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">).</span><span class=\"n\">generate</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">);</span>\n    <span class=\"n\">Aquila</span><span class=\"o\">::</span><span class=\"n\">TextPlot</span> <span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"s\">&quot;Square wave&quot;</span><span class=\"p\">);</span>\n    <span class=\"n\">plot</span><span class=\"p\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">generator</span><span class=\"p\">);</span>\n\n    <span class=\"n\">generator</span><span class=\"p\">.</span><span class=\"n\">setDuty</span><span class=\"p\">(</span><span class=\"mf\">0.25</span><span class=\"p\">).</span><span class=\"n\">generate</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">);</span>\n    <span class=\"n\">plot</span><span class=\"p\">.</span><span class=\"n\">setTitle</span><span class=\"p\">(</span><span class=\"s\">&quot;Square wave, duty cycle = 25%&quot;</span><span class=\"p\">);</span>\n    <span class=\"n\">plot</span><span class=\"p\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">generator</span><span class=\"p\">);</span>\n\n    <span class=\"n\">generator</span><span class=\"p\">.</span><span class=\"n\">setDuty</span><span class=\"p\">(</span><span class=\"mf\">0.75</span><span class=\"p\">).</span><span class=\"n\">generate</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">);</span>\n    <span class=\"n\">plot</span><span class=\"p\">.</span><span class=\"n\">setTitle</span><span class=\"p\">(</span><span class=\"s\">&quot;Square wave, duty cycle = 75%&quot;</span><span class=\"p\">);</span>\n    <span class=\"n\">plot</span><span class=\"p\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">generator</span><span class=\"p\">);</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>Output:</p>\n<div class=\"highlight\"><pre><span class=\"n\">Square</span> <span class=\"n\">wave</span>\n<span class=\"o\">****</span>    <span class=\"o\">****</span>    <span class=\"o\">****</span>    <span class=\"o\">****</span>    <span class=\"o\">****</span>    <span class=\"o\">****</span>    <span class=\"o\">****</span>    <span class=\"o\">****</span>\n\n    <span class=\"o\">****</span>    <span class=\"o\">****</span>    <span class=\"o\">****</span>    <span class=\"o\">****</span>    <span class=\"o\">****</span>    <span class=\"o\">****</span>    <span class=\"o\">****</span>    <span class=\"o\">****</span>\n\n<span class=\"n\">Square</span> <span class=\"n\">wave</span><span class=\"p\">,</span> <span class=\"n\">duty</span> <span class=\"n\">cycle</span> <span class=\"p\">=</span> 25<span class=\"c\">%</span>\n<span class=\"o\">**</span>      <span class=\"o\">**</span>      <span class=\"o\">**</span>      <span class=\"o\">**</span>      <span class=\"o\">**</span>      <span class=\"o\">**</span>      <span class=\"o\">**</span>      <span class=\"o\">**</span>\n\n  <span class=\"o\">******</span>  <span class=\"o\">******</span>  <span class=\"o\">******</span>  <span class=\"o\">******</span>  <span class=\"o\">******</span>  <span class=\"o\">******</span>  <span class=\"o\">******</span>  <span class=\"o\">******</span>\n\n<span class=\"n\">Square</span> <span class=\"n\">wave</span><span class=\"p\">,</span> <span class=\"n\">duty</span> <span class=\"n\">cycle</span> <span class=\"p\">=</span> 75<span class=\"c\">%</span>\n<span class=\"o\">******</span>  <span class=\"o\">******</span>  <span class=\"o\">******</span>  <span class=\"o\">******</span>  <span class=\"o\">******</span>  <span class=\"o\">******</span>  <span class=\"o\">******</span>  <span class=\"o\">******</span>\n\n      <span class=\"o\">**</span>      <span class=\"o\">**</span>      <span class=\"o\">**</span>      <span class=\"o\">**</span>      <span class=\"o\">**</span>      <span class=\"o\">**</span>      <span class=\"o\">**</span>      <span class=\"o\">**</span>\n</pre></div>",
            "slug": "square-wave-generator",
            "content_markup_type": "markdown"
        }
    },
    {
        "pk": 13,
        "model": "articles.article",
        "fields": {
            "title": "Frequency-domain filtering with FFT",
            "created": "2010-04-28T23:47:10Z",
            "modified": "2010-04-28T23:47:10Z",
            "content": "Signal filtering can be expressed in two (equivalent) approaches. \r\n\r\n 1. **convolution** of the signal and *impulse response* of the filter - in time domain\r\n 2. **multiplication** of signal spectrum and filter's *transfer function* (filter spectrum) - in frequency domain\r\n\r\n\r\nThis example illustrates the second approach. Signal spectrum is calculated using **FFT**. The filter is represented as it's transfer function - it is a pretty simple low-pass filter. The two complex arrays are multiplied and the result is plotted. Inverse FFT is used to return to a time-domain signal.\r\n\r\n    :::c++\r\n    #include \"aquila/global.h\"\r\n    #include \"aquila/transform/OouraFft.h\"\r\n    #include \"aquila/tools/TextPlot.h\"\r\n    #include <algorithm>\r\n    #include <cmath>\r\n    #include <functional>\r\n    \r\n    int main()\r\n    {\r\n        // input signal parameters\r\n        const std::size_t SIZE = 64;\r\n        const Aquila::FrequencyType sampleFreq = 2000;\r\n        const double dt = 1.0/sampleFreq;\r\n        const Aquila::FrequencyType f1 = 96, f2 = 813;\r\n        const Aquila::FrequencyType f_lp = 500;\r\n    \r\n        double x[SIZE];\r\n        for (std::size_t i = 0; i < SIZE; ++i)\r\n        {\r\n            x[i] = 32*std::sin(2*M_PI*f1*i*dt) + 8*std::sin(2*M_PI*f2*i*dt + 0.75*M_PI);\r\n        }\r\n        Aquila::TextPlot plt(\"Signal waveform before filtration\");\r\n        plt.plot(x, SIZE);\r\n    \r\n        // calculate the FFT\r\n        Aquila::OouraFft fft(SIZE);\r\n        Aquila::ComplexType spectrum[SIZE];\r\n        fft.fft(x, spectrum);\r\n        plt.setTitle(\"Signal spectrum before filtration\");\r\n        plt.plotSpectrum(spectrum, SIZE);\r\n    \r\n        // generate a low-pass filter spectrum\r\n        Aquila::ComplexType filterSpectrum[SIZE];\r\n        for (std::size_t i = 0; i < SIZE; ++i)\r\n        {\r\n            if (i < (SIZE * f_lp / sampleFreq))\r\n            {\r\n                // passband\r\n                filterSpectrum[i] = 1.0;\r\n            }\r\n            else\r\n            {\r\n                // stopband\r\n                filterSpectrum[i] = 0.0;\r\n            }\r\n        }\r\n        plt.setTitle(\"Filter spectrum\");\r\n        plt.plotSpectrum(filterSpectrum, SIZE);\r\n    \r\n        // the following line does the multiplication of two spectra\r\n        // (which is complementary to convolution in time domain)\r\n        std::transform(spectrum, spectrum + SIZE, filterSpectrum, spectrum,\r\n                       std::multiplies<Aquila::ComplexType>());\r\n        plt.setTitle(\"Signal spectrum after filtration\");\r\n        plt.plotSpectrum(spectrum, SIZE);\r\n    \r\n        // Inverse FFT moves us back to time domain\r\n        double x1[SIZE];\r\n        fft.ifft(spectrum, x1);\r\n        plt.setTitle(\"Signal waveform after filtration\");\r\n        plt.plot(x1, SIZE);\r\n    \r\n        return 0;\r\n    }\r\n\r\n\r\nThe output should resemble something like this:\r\n\r\n\r\n    Signal waveform before filtration\r\n         * *                   *                  ** *              \r\n        *                   ***                 *                   \r\n      *   *                      *                  *               \r\n       *                        *                *                  \r\n            **            *                            *            \r\n                           *                          *             \r\n    *         *                   *           **                    \r\n     *                             *                    *          *\r\n                         *          *        *                      \r\n                *       *                                        ** \r\n               *       *                                 **         \r\n                                      *    *                        \r\n                     *                      *                  *    \r\n                  *                  *   *                  *       \r\n                 * *  *                 *                  *    *   \r\n                    *                  *  *                  **     \r\n\r\n    Signal spectrum before filtration\r\n       *                            \r\n                                    \r\n                                    \r\n                                    \r\n                                    \r\n                                    \r\n                                    \r\n                                    \r\n                                    \r\n                                    \r\n                                    \r\n                                    \r\n                              *     \r\n                                    \r\n        *                           \r\n    ***  ********************* *****\r\n\r\n    Filter spectrum\r\n    ****************                \r\n                                    \r\n                                    \r\n                                    \r\n                                    \r\n                                    \r\n                                    \r\n                                    \r\n                                    \r\n                                    \r\n                                    \r\n                                    \r\n                                    \r\n                                    \r\n                                    \r\n                    ****************\r\n\r\n    Signal spectrum after filtration\r\n       *                            \r\n                                    \r\n                                    \r\n                                    \r\n                                    \r\n                                    \r\n                                    \r\n                                    \r\n                                    \r\n                                    \r\n                                    \r\n                                    \r\n                                    \r\n                                    \r\n        *                           \r\n    ***  ***************************\r\n\r\n    Signal waveform after filtration\r\n        ***                  ***                  ***               \r\n       *   *                *   *                *   *              \r\n            *                    *              *                   \r\n      *                    *                          *             \r\n             *                                 *                    \r\n     *                    *       *                    *            \r\n                                                                    \r\n    *         *          *         *          *         *          *\r\n                                                                    \r\n               *        *           *        *                    * \r\n                                                         *          \r\n                *                           *                    *  \r\n                       *             *                    *         \r\n                 *                         *                    *   \r\n                      *               *                    *        \r\n                  ****                 ****                 ****    \r\n\r\n",
            "_content_rendered": "<p>Signal filtering can be expressed in two (equivalent) approaches. </p>\n<ol>\n<li><strong>convolution</strong> of the signal and <em>impulse response</em> of the filter - in time domain</li>\n<li><strong>multiplication</strong> of signal spectrum and filter's <em>transfer function</em> (filter spectrum) - in frequency domain</li>\n</ol>\n<p>This example illustrates the second approach. Signal spectrum is calculated using <strong>FFT</strong>. The filter is represented as it's transfer function - it is a pretty simple low-pass filter. The two complex arrays are multiplied and the result is plotted. Inverse FFT is used to return to a time-domain signal.</p>\n<div class=\"highlight\"><pre><span class=\"cp\">#include &quot;aquila/global.h&quot;</span>\n<span class=\"cp\">#include &quot;aquila/transform/OouraFft.h&quot;</span>\n<span class=\"cp\">#include &quot;aquila/tools/TextPlot.h&quot;</span>\n<span class=\"cp\">#include &lt;algorithm&gt;</span>\n<span class=\"cp\">#include &lt;cmath&gt;</span>\n<span class=\"cp\">#include &lt;functional&gt;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">// input signal parameters</span>\n    <span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">size_t</span> <span class=\"n\">SIZE</span> <span class=\"o\">=</span> <span class=\"mi\">64</span><span class=\"p\">;</span>\n    <span class=\"k\">const</span> <span class=\"n\">Aquila</span><span class=\"o\">::</span><span class=\"n\">FrequencyType</span> <span class=\"n\">sampleFreq</span> <span class=\"o\">=</span> <span class=\"mi\">2000</span><span class=\"p\">;</span>\n    <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">dt</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span><span class=\"o\">/</span><span class=\"n\">sampleFreq</span><span class=\"p\">;</span>\n    <span class=\"k\">const</span> <span class=\"n\">Aquila</span><span class=\"o\">::</span><span class=\"n\">FrequencyType</span> <span class=\"n\">f1</span> <span class=\"o\">=</span> <span class=\"mi\">96</span><span class=\"p\">,</span> <span class=\"n\">f2</span> <span class=\"o\">=</span> <span class=\"mi\">813</span><span class=\"p\">;</span>\n    <span class=\"k\">const</span> <span class=\"n\">Aquila</span><span class=\"o\">::</span><span class=\"n\">FrequencyType</span> <span class=\"n\">f_lp</span> <span class=\"o\">=</span> <span class=\"mi\">500</span><span class=\"p\">;</span>\n\n    <span class=\"kt\">double</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">SIZE</span><span class=\"p\">];</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">size_t</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">SIZE</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">32</span><span class=\"o\">*</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">M_PI</span><span class=\"o\">*</span><span class=\"n\">f1</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"o\">*</span><span class=\"n\">dt</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">8</span><span class=\"o\">*</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">M_PI</span><span class=\"o\">*</span><span class=\"n\">f2</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"o\">*</span><span class=\"n\">dt</span> <span class=\"o\">+</span> <span class=\"mf\">0.75</span><span class=\"o\">*</span><span class=\"n\">M_PI</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">Aquila</span><span class=\"o\">::</span><span class=\"n\">TextPlot</span> <span class=\"n\">plt</span><span class=\"p\">(</span><span class=\"s\">&quot;Signal waveform before filtration&quot;</span><span class=\"p\">);</span>\n    <span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">SIZE</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// calculate the FFT</span>\n    <span class=\"n\">Aquila</span><span class=\"o\">::</span><span class=\"n\">OouraFft</span> <span class=\"n\">fft</span><span class=\"p\">(</span><span class=\"n\">SIZE</span><span class=\"p\">);</span>\n    <span class=\"n\">Aquila</span><span class=\"o\">::</span><span class=\"n\">ComplexType</span> <span class=\"n\">spectrum</span><span class=\"p\">[</span><span class=\"n\">SIZE</span><span class=\"p\">];</span>\n    <span class=\"n\">fft</span><span class=\"p\">.</span><span class=\"n\">fft</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">spectrum</span><span class=\"p\">);</span>\n    <span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"n\">setTitle</span><span class=\"p\">(</span><span class=\"s\">&quot;Signal spectrum before filtration&quot;</span><span class=\"p\">);</span>\n    <span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"n\">plotSpectrum</span><span class=\"p\">(</span><span class=\"n\">spectrum</span><span class=\"p\">,</span> <span class=\"n\">SIZE</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// generate a low-pass filter spectrum</span>\n    <span class=\"n\">Aquila</span><span class=\"o\">::</span><span class=\"n\">ComplexType</span> <span class=\"n\">filterSpectrum</span><span class=\"p\">[</span><span class=\"n\">SIZE</span><span class=\"p\">];</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">size_t</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">SIZE</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"p\">(</span><span class=\"n\">SIZE</span> <span class=\"o\">*</span> <span class=\"n\">f_lp</span> <span class=\"o\">/</span> <span class=\"n\">sampleFreq</span><span class=\"p\">))</span>\n        <span class=\"p\">{</span>\n            <span class=\"c1\">// passband</span>\n            <span class=\"n\">filterSpectrum</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">else</span>\n        <span class=\"p\">{</span>\n            <span class=\"c1\">// stopband</span>\n            <span class=\"n\">filterSpectrum</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"n\">setTitle</span><span class=\"p\">(</span><span class=\"s\">&quot;Filter spectrum&quot;</span><span class=\"p\">);</span>\n    <span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"n\">plotSpectrum</span><span class=\"p\">(</span><span class=\"n\">filterSpectrum</span><span class=\"p\">,</span> <span class=\"n\">SIZE</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// the following line does the multiplication of two spectra</span>\n    <span class=\"c1\">// (which is complementary to convolution in time domain)</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">spectrum</span><span class=\"p\">,</span> <span class=\"n\">spectrum</span> <span class=\"o\">+</span> <span class=\"n\">SIZE</span><span class=\"p\">,</span> <span class=\"n\">filterSpectrum</span><span class=\"p\">,</span> <span class=\"n\">spectrum</span><span class=\"p\">,</span>\n                   <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">multiplies</span><span class=\"o\">&lt;</span><span class=\"n\">Aquila</span><span class=\"o\">::</span><span class=\"n\">ComplexType</span><span class=\"o\">&gt;</span><span class=\"p\">());</span>\n    <span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"n\">setTitle</span><span class=\"p\">(</span><span class=\"s\">&quot;Signal spectrum after filtration&quot;</span><span class=\"p\">);</span>\n    <span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"n\">plotSpectrum</span><span class=\"p\">(</span><span class=\"n\">spectrum</span><span class=\"p\">,</span> <span class=\"n\">SIZE</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// Inverse FFT moves us back to time domain</span>\n    <span class=\"kt\">double</span> <span class=\"n\">x1</span><span class=\"p\">[</span><span class=\"n\">SIZE</span><span class=\"p\">];</span>\n    <span class=\"n\">fft</span><span class=\"p\">.</span><span class=\"n\">ifft</span><span class=\"p\">(</span><span class=\"n\">spectrum</span><span class=\"p\">,</span> <span class=\"n\">x1</span><span class=\"p\">);</span>\n    <span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"n\">setTitle</span><span class=\"p\">(</span><span class=\"s\">&quot;Signal waveform after filtration&quot;</span><span class=\"p\">);</span>\n    <span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">SIZE</span><span class=\"p\">);</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>The output should resemble something like this:</p>\n<div class=\"highlight\"><pre><span class=\"n\">Signal</span> <span class=\"n\">waveform</span> <span class=\"n\">before</span> <span class=\"n\">filtration</span>\n     <span class=\"o\">*</span> <span class=\"o\">*</span>                   <span class=\"o\">*</span>                  <span class=\"o\">**</span> <span class=\"o\">*</span>              \n    <span class=\"o\">*</span>                   <span class=\"o\">***</span>                 <span class=\"o\">*</span>                   \n  <span class=\"o\">*</span>   <span class=\"o\">*</span>                      <span class=\"o\">*</span>                  <span class=\"o\">*</span>               \n   <span class=\"o\">*</span>                        <span class=\"o\">*</span>                <span class=\"o\">*</span>                  \n        <span class=\"o\">**</span>            <span class=\"o\">*</span>                            <span class=\"o\">*</span>            \n                       <span class=\"o\">*</span>                          <span class=\"o\">*</span>             \n<span class=\"o\">*</span>         <span class=\"o\">*</span>                   <span class=\"o\">*</span>           <span class=\"o\">**</span>                    \n <span class=\"o\">*</span>                             <span class=\"o\">*</span>                    <span class=\"o\">*</span>          <span class=\"o\">*</span>\n                     <span class=\"o\">*</span>          <span class=\"o\">*</span>        <span class=\"o\">*</span>                      \n            <span class=\"o\">*</span>       <span class=\"o\">*</span>                                        <span class=\"o\">**</span> \n           <span class=\"o\">*</span>       <span class=\"o\">*</span>                                 <span class=\"o\">**</span>         \n                                  <span class=\"o\">*</span>    <span class=\"o\">*</span>                        \n                 <span class=\"o\">*</span>                      <span class=\"o\">*</span>                  <span class=\"o\">*</span>    \n              <span class=\"o\">*</span>                  <span class=\"o\">*</span>   <span class=\"o\">*</span>                  <span class=\"o\">*</span>       \n             <span class=\"o\">*</span> <span class=\"o\">*</span>  <span class=\"o\">*</span>                 <span class=\"o\">*</span>                  <span class=\"o\">*</span>    <span class=\"o\">*</span>   \n                <span class=\"o\">*</span>                  <span class=\"o\">*</span>  <span class=\"o\">*</span>                  <span class=\"o\">**</span>\n\n<span class=\"n\">Signal</span> <span class=\"n\">spectrum</span> <span class=\"n\">before</span> <span class=\"n\">filtration</span>\n   <span class=\"o\">*</span>\n\n                          <span class=\"o\">*</span>\n\n    <span class=\"o\">*</span>                           \n<span class=\"o\">***</span>  <span class=\"o\">*********************</span> <span class=\"o\">*****</span>\n\n<span class=\"n\">Filter</span> <span class=\"n\">spectrum</span>\n<span class=\"o\">****************</span>\n\n                <span class=\"o\">****************</span>\n\n<span class=\"n\">Signal</span> <span class=\"n\">spectrum</span> <span class=\"n\">after</span> <span class=\"n\">filtration</span>\n   <span class=\"o\">*</span>\n\n    <span class=\"o\">*</span>                           \n<span class=\"o\">***</span>  <span class=\"o\">***************************</span>\n\n<span class=\"n\">Signal</span> <span class=\"n\">waveform</span> <span class=\"n\">after</span> <span class=\"n\">filtration</span>\n    <span class=\"o\">***</span>                  <span class=\"o\">***</span>                  <span class=\"o\">***</span>               \n   <span class=\"o\">*</span>   <span class=\"o\">*</span>                <span class=\"o\">*</span>   <span class=\"o\">*</span>                <span class=\"o\">*</span>   <span class=\"o\">*</span>              \n        <span class=\"o\">*</span>                    <span class=\"o\">*</span>              <span class=\"o\">*</span>                   \n  <span class=\"o\">*</span>                    <span class=\"o\">*</span>                          <span class=\"o\">*</span>             \n         <span class=\"o\">*</span>                                 <span class=\"o\">*</span>                    \n <span class=\"o\">*</span>                    <span class=\"o\">*</span>       <span class=\"o\">*</span>                    <span class=\"o\">*</span>\n\n<span class=\"o\">*</span>         <span class=\"o\">*</span>          <span class=\"o\">*</span>         <span class=\"o\">*</span>          <span class=\"o\">*</span>         <span class=\"o\">*</span>          <span class=\"o\">*</span>\n\n           <span class=\"o\">*</span>        <span class=\"o\">*</span>           <span class=\"o\">*</span>        <span class=\"o\">*</span>                    <span class=\"o\">*</span> \n                                                     <span class=\"o\">*</span>          \n            <span class=\"o\">*</span>                           <span class=\"o\">*</span>                    <span class=\"o\">*</span>  \n                   <span class=\"o\">*</span>             <span class=\"o\">*</span>                    <span class=\"o\">*</span>         \n             <span class=\"o\">*</span>                         <span class=\"o\">*</span>                    <span class=\"o\">*</span>   \n                  <span class=\"o\">*</span>               <span class=\"o\">*</span>                    <span class=\"o\">*</span>        \n              <span class=\"o\">****</span>                 <span class=\"o\">****</span>                 <span class=\"o\">****</span>\n</pre></div>",
            "slug": "frequency-domain-filtering-with-fft",
            "content_markup_type": "markdown"
        }
    },
    {
        "pk": 12,
        "model": "articles.article",
        "fields": {
            "title": "A simple FFT example",
            "created": "2010-04-28T20:03:50Z",
            "modified": "2010-04-28T20:03:50Z",
            "content": "The following example shows how to use **FFT** to calculate spectrum of a signal. The input signal is a sum of two sine waves (125 and 700 Hz) sampled at 2 kHz. The magnitude spectrum is plotted to the console.\r\n\r\n\r\n    :::c++\r\n    #include \"aquila/global.h\"\r\n    #include \"aquila/transform/OouraFft.h\"\r\n    #include \"aquila/tools/TextPlot.h\"\r\n    #include <cmath>\r\n    \r\n    int main()\r\n    {\r\n        // input signal parameters\r\n        const std::size_t SIZE = 64;\r\n        const Aquila::FrequencyType sampleFreq = 2000;\r\n        const double dt = 1.0/sampleFreq;\r\n        const Aquila::FrequencyType f1 = 125, f2 = 700;\r\n    \r\n        double x[SIZE];\r\n        for (std::size_t i = 0; i < SIZE; ++i)\r\n        {\r\n            x[i] = 32*std::sin(2*M_PI*f1*i*dt) + 8*std::sin(2*M_PI*f2*i*dt + 0.75*M_PI);\r\n        }\r\n        Aquila::TextPlot plt(\"Input signal\");\r\n        plt.plot(x, SIZE);\r\n    \r\n        // calculate the FFT\r\n        Aquila::OouraFft fft(SIZE);\r\n        Aquila::ComplexType spectrum[SIZE];\r\n        fft.fft(x, spectrum);\r\n    \r\n        plt.setTitle(\"Spectrum\");\r\n        plt.plotSpectrum(spectrum, SIZE);\r\n    \r\n        return 0;\r\n    }\r\n\r\n\r\nThe output should look like this:\r\n\r\n\r\n    Input signal\r\n       * *              *                *             *            \r\n                       *              * *               * *         \r\n      * * *               *            *                 *          \r\n                     *   *                                          \r\n                      *    *              **          *             \r\n                                     *               *              \r\n    **     **                               *       *      *        \r\n                                                                    \r\n                    *              **                       **      \r\n                            **                                     *\r\n             *    *                                                 \r\n                   *                         **    *              * \r\n               *              * *                **                 \r\n              *                   *            *              ***   \r\n                 *               *                                  \r\n                *              *                *                *  \r\n\r\n    Spectrum\r\n        *                           \r\n                                    \r\n                                    \r\n                                    \r\n                                    \r\n                                    \r\n                                    \r\n                                    \r\n                                    \r\n                                    \r\n                                    \r\n                                    \r\n                                    \r\n                          *         \r\n                           *        \r\n    **** *****************  ********\r\n",
            "_content_rendered": "<p>The following example shows how to use <strong>FFT</strong> to calculate spectrum of a signal. The input signal is a sum of two sine waves (125 and 700 Hz) sampled at 2 kHz. The magnitude spectrum is plotted to the console.</p>\n<div class=\"highlight\"><pre><span class=\"cp\">#include &quot;aquila/global.h&quot;</span>\n<span class=\"cp\">#include &quot;aquila/transform/OouraFft.h&quot;</span>\n<span class=\"cp\">#include &quot;aquila/tools/TextPlot.h&quot;</span>\n<span class=\"cp\">#include &lt;cmath&gt;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">// input signal parameters</span>\n    <span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">size_t</span> <span class=\"n\">SIZE</span> <span class=\"o\">=</span> <span class=\"mi\">64</span><span class=\"p\">;</span>\n    <span class=\"k\">const</span> <span class=\"n\">Aquila</span><span class=\"o\">::</span><span class=\"n\">FrequencyType</span> <span class=\"n\">sampleFreq</span> <span class=\"o\">=</span> <span class=\"mi\">2000</span><span class=\"p\">;</span>\n    <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">dt</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span><span class=\"o\">/</span><span class=\"n\">sampleFreq</span><span class=\"p\">;</span>\n    <span class=\"k\">const</span> <span class=\"n\">Aquila</span><span class=\"o\">::</span><span class=\"n\">FrequencyType</span> <span class=\"n\">f1</span> <span class=\"o\">=</span> <span class=\"mi\">125</span><span class=\"p\">,</span> <span class=\"n\">f2</span> <span class=\"o\">=</span> <span class=\"mi\">700</span><span class=\"p\">;</span>\n\n    <span class=\"kt\">double</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">SIZE</span><span class=\"p\">];</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">size_t</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">SIZE</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">32</span><span class=\"o\">*</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">M_PI</span><span class=\"o\">*</span><span class=\"n\">f1</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"o\">*</span><span class=\"n\">dt</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">8</span><span class=\"o\">*</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">M_PI</span><span class=\"o\">*</span><span class=\"n\">f2</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"o\">*</span><span class=\"n\">dt</span> <span class=\"o\">+</span> <span class=\"mf\">0.75</span><span class=\"o\">*</span><span class=\"n\">M_PI</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">Aquila</span><span class=\"o\">::</span><span class=\"n\">TextPlot</span> <span class=\"n\">plt</span><span class=\"p\">(</span><span class=\"s\">&quot;Input signal&quot;</span><span class=\"p\">);</span>\n    <span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">SIZE</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// calculate the FFT</span>\n    <span class=\"n\">Aquila</span><span class=\"o\">::</span><span class=\"n\">OouraFft</span> <span class=\"n\">fft</span><span class=\"p\">(</span><span class=\"n\">SIZE</span><span class=\"p\">);</span>\n    <span class=\"n\">Aquila</span><span class=\"o\">::</span><span class=\"n\">ComplexType</span> <span class=\"n\">spectrum</span><span class=\"p\">[</span><span class=\"n\">SIZE</span><span class=\"p\">];</span>\n    <span class=\"n\">fft</span><span class=\"p\">.</span><span class=\"n\">fft</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">spectrum</span><span class=\"p\">);</span>\n\n    <span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"n\">setTitle</span><span class=\"p\">(</span><span class=\"s\">&quot;Spectrum&quot;</span><span class=\"p\">);</span>\n    <span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"n\">plotSpectrum</span><span class=\"p\">(</span><span class=\"n\">spectrum</span><span class=\"p\">,</span> <span class=\"n\">SIZE</span><span class=\"p\">);</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>The output should look like this:</p>\n<div class=\"highlight\"><pre><span class=\"n\">Input</span> <span class=\"n\">signal</span>\n   <span class=\"o\">*</span> <span class=\"o\">*</span>              <span class=\"o\">*</span>                <span class=\"o\">*</span>             <span class=\"o\">*</span>            \n                   <span class=\"o\">*</span>              <span class=\"o\">*</span> <span class=\"o\">*</span>               <span class=\"o\">*</span> <span class=\"o\">*</span>         \n  <span class=\"o\">*</span> <span class=\"o\">*</span> <span class=\"o\">*</span>               <span class=\"o\">*</span>            <span class=\"o\">*</span>                 <span class=\"o\">*</span>          \n                 <span class=\"o\">*</span>   <span class=\"o\">*</span>                                          \n                  <span class=\"o\">*</span>    <span class=\"o\">*</span>              <span class=\"o\">**</span>          <span class=\"o\">*</span>             \n                                 <span class=\"o\">*</span>               <span class=\"o\">*</span>              \n<span class=\"o\">**</span>     <span class=\"o\">**</span>                               <span class=\"o\">*</span>       <span class=\"o\">*</span>      <span class=\"o\">*</span>\n\n                <span class=\"o\">*</span>              <span class=\"o\">**</span>                       <span class=\"o\">**</span>      \n                        <span class=\"o\">**</span>                                     <span class=\"o\">*</span>\n         <span class=\"o\">*</span>    <span class=\"o\">*</span>                                                 \n               <span class=\"o\">*</span>                         <span class=\"o\">**</span>    <span class=\"o\">*</span>              <span class=\"o\">*</span> \n           <span class=\"o\">*</span>              <span class=\"o\">*</span> <span class=\"o\">*</span>                <span class=\"o\">**</span>                 \n          <span class=\"o\">*</span>                   <span class=\"o\">*</span>            <span class=\"o\">*</span>              <span class=\"o\">***</span>   \n             <span class=\"o\">*</span>               <span class=\"o\">*</span>                                  \n            <span class=\"o\">*</span>              <span class=\"o\">*</span>                <span class=\"o\">*</span>                <span class=\"o\">*</span>\n\n<span class=\"n\">Spectrum</span>\n    <span class=\"o\">*</span>\n\n                      <span class=\"o\">*</span>         \n                       <span class=\"o\">*</span>        \n<span class=\"o\">****</span> <span class=\"o\">*****************</span>  <span class=\"o\">********</span>\n</pre></div>",
            "slug": "simple-fft-example",
            "content_markup_type": "markdown"
        }
    },
    {
        "pk": 11,
        "model": "articles.article",
        "fields": {
            "title": "TextPlot and a C-style array",
            "created": "2010-04-14T19:05:22Z",
            "modified": "2010-04-14T19:05:22Z",
            "content": "`Aquila::TextPlot` can be used to output a one-dimensional data array to console.\r\n\r\n    :::c++\r\n    #include \"aquila/tools/TextPlot.h\"\r\n    #include <cstddef>\r\n    \r\n    int main(int argc, char *argv[])\r\n    {\r\n        const std::size_t SIZE = 64;\r\n        int arr[SIZE];\r\n        for (std::size_t i = 0; i < SIZE; ++i)\r\n        {\r\n            arr[i] = i % 10;\r\n        }\r\n    \r\n        Aquila::TextPlot plot(\"Example plot\");\r\n        plot.plot(arr, SIZE);\r\n    \r\n        return 0;\r\n    }\r\n\r\nThe plot should look like this:\r\n\r\n\r\n    Example plot\r\n             *         *         *         *         *         *    \r\n            *         *         *         *         *         *     \r\n                                                                    \r\n           *         *         *         *         *         *      \r\n                                                                    \r\n          *         *         *         *         *         *       \r\n                                                                    \r\n         *         *         *         *         *         *        \r\n        *         *         *         *         *         *         \r\n                                                                    \r\n       *         *         *         *         *         *         *\r\n                                                                    \r\n      *         *         *         *         *         *         * \r\n                                                                    \r\n     *         *         *         *         *         *         *  \r\n    *         *         *         *         *         *         *   \r\n",
            "_content_rendered": "<p><code>Aquila::TextPlot</code> can be used to output a one-dimensional data array to console.</p>\n<div class=\"highlight\"><pre><span class=\"cp\">#include &quot;aquila/tools/TextPlot.h&quot;</span>\n<span class=\"cp\">#include &lt;cstddef&gt;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">argv</span><span class=\"p\">[])</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">size_t</span> <span class=\"n\">SIZE</span> <span class=\"o\">=</span> <span class=\"mi\">64</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">SIZE</span><span class=\"p\">];</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">size_t</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">SIZE</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">10</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">Aquila</span><span class=\"o\">::</span><span class=\"n\">TextPlot</span> <span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"s\">&quot;Example plot&quot;</span><span class=\"p\">);</span>\n    <span class=\"n\">plot</span><span class=\"p\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">,</span> <span class=\"n\">SIZE</span><span class=\"p\">);</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>The plot should look like this:</p>\n<div class=\"highlight\"><pre><span class=\"n\">Example</span> <span class=\"n\">plot</span>\n         <span class=\"o\">*</span>         <span class=\"o\">*</span>         <span class=\"o\">*</span>         <span class=\"o\">*</span>         <span class=\"o\">*</span>         <span class=\"o\">*</span>    \n        <span class=\"o\">*</span>         <span class=\"o\">*</span>         <span class=\"o\">*</span>         <span class=\"o\">*</span>         <span class=\"o\">*</span>         <span class=\"o\">*</span>\n\n       <span class=\"o\">*</span>         <span class=\"o\">*</span>         <span class=\"o\">*</span>         <span class=\"o\">*</span>         <span class=\"o\">*</span>         <span class=\"o\">*</span>\n\n      <span class=\"o\">*</span>         <span class=\"o\">*</span>         <span class=\"o\">*</span>         <span class=\"o\">*</span>         <span class=\"o\">*</span>         <span class=\"o\">*</span>\n\n     <span class=\"o\">*</span>         <span class=\"o\">*</span>         <span class=\"o\">*</span>         <span class=\"o\">*</span>         <span class=\"o\">*</span>         <span class=\"o\">*</span>        \n    <span class=\"o\">*</span>         <span class=\"o\">*</span>         <span class=\"o\">*</span>         <span class=\"o\">*</span>         <span class=\"o\">*</span>         <span class=\"o\">*</span>\n\n   <span class=\"o\">*</span>         <span class=\"o\">*</span>         <span class=\"o\">*</span>         <span class=\"o\">*</span>         <span class=\"o\">*</span>         <span class=\"o\">*</span>         <span class=\"o\">*</span>\n\n  <span class=\"o\">*</span>         <span class=\"o\">*</span>         <span class=\"o\">*</span>         <span class=\"o\">*</span>         <span class=\"o\">*</span>         <span class=\"o\">*</span>         <span class=\"o\">*</span>\n\n <span class=\"o\">*</span>         <span class=\"o\">*</span>         <span class=\"o\">*</span>         <span class=\"o\">*</span>         <span class=\"o\">*</span>         <span class=\"o\">*</span>         <span class=\"o\">*</span>  \n<span class=\"o\">*</span>         <span class=\"o\">*</span>         <span class=\"o\">*</span>         <span class=\"o\">*</span>         <span class=\"o\">*</span>         <span class=\"o\">*</span>         <span class=\"o\">*</span>\n</pre></div>",
            "slug": "textplot-array",
            "content_markup_type": "markdown"
        }
    },
    {
        "pk": 10,
        "model": "articles.article",
        "fields": {
            "title": "Iterating over wave file data",
            "created": "2010-04-07T22:33:33Z",
            "modified": "2010-04-07T22:33:33Z",
            "content": "    :::c++\r\n    #include \"aquila/global.h\"\r\n    #include \"aquila/source/WaveFile.h\"\r\n    #include <algorithm>\r\n    #include <cstdlib>\r\n    #include <functional>\r\n    #include <iostream>\r\n\r\n    int main(int argc, char *argv[])\r\n    {\r\n        if (argc < 2)\r\n        {\r\n            std::cout << \"Usage: wave_iteration <FILENAME> [<FRAMELENGTH>]\" << std::endl;\r\n            return 1;\r\n        }\r\n\r\n        int frameLength = 0; // frame length in milliseconds\r\n        if (argc >= 3)\r\n        {\r\n            frameLength = std::atoi(argv[2]);\r\n        }\r\n        if (0 == frameLength)\r\n        {\r\n            frameLength = 20;\r\n        }\r\n\r\n        Aquila::WaveFile wav(argv[1]);\r\n        std::cout << \"Loaded file: \" << wav.getFilename()\r\n                  << \" (\" << wav.getBitsPerSample() << \"b)\" << std::endl;\r\n        Aquila::SampleType maxValue = 0, minValue = 0;\r\n\r\n        // simple index-based iteration\r\n        for (std::size_t i = 0; i < wav.getSamplesCount(); ++i)\r\n        {\r\n            if (wav.sample(i) > maxValue)\r\n                maxValue = wav.sample(i);\r\n        }\r\n        std::cout << \"Maximum sample value: \" << maxValue << std::endl;\r\n\r\n        // iterator usage\r\n        for (Aquila::WaveFile::iterator it = wav.begin(); it != wav.end(); ++it)\r\n        {\r\n            if (*it < minValue)\r\n                minValue = *it;\r\n        }\r\n        std::cout << \"Minimum sample value: \" << minValue << std::endl;\r\n\r\n        // STL algorithms work too, so the previous examples could be rewritten\r\n        // using max/min_element.\r\n        int limit = 5000;\r\n        int aboveLimit = std::count_if(wav.begin(), wav.end(),\r\n                                       std::bind2nd(std::greater<int>(), limit));\r\n        std::cout << \"There are \" << aboveLimit << \" samples greater than \"\r\n                  << limit << std::endl;\r\n\r\n        return 0;\r\n    }\r\n",
            "_content_rendered": "<div class=\"highlight\"><pre><span class=\"cp\">#include &quot;aquila/global.h&quot;</span>\n<span class=\"cp\">#include &quot;aquila/source/WaveFile.h&quot;</span>\n<span class=\"cp\">#include &lt;algorithm&gt;</span>\n<span class=\"cp\">#include &lt;cstdlib&gt;</span>\n<span class=\"cp\">#include &lt;functional&gt;</span>\n<span class=\"cp\">#include &lt;iostream&gt;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">argv</span><span class=\"p\">[])</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">argc</span> <span class=\"o\">&lt;</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Usage: wave_iteration &lt;FILENAME&gt; [&lt;FRAMELENGTH&gt;]&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kt\">int</span> <span class=\"n\">frameLength</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"c1\">// frame length in milliseconds</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">argc</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">frameLength</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">atoi</span><span class=\"p\">(</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"mi\">0</span> <span class=\"o\">==</span> <span class=\"n\">frameLength</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">frameLength</span> <span class=\"o\">=</span> <span class=\"mi\">20</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">Aquila</span><span class=\"o\">::</span><span class=\"n\">WaveFile</span> <span class=\"n\">wav</span><span class=\"p\">(</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]);</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Loaded file: &quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">wav</span><span class=\"p\">.</span><span class=\"n\">getFilename</span><span class=\"p\">()</span>\n              <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot; (&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">wav</span><span class=\"p\">.</span><span class=\"n\">getBitsPerSample</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;b)&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"n\">Aquila</span><span class=\"o\">::</span><span class=\"n\">SampleType</span> <span class=\"n\">maxValue</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">minValue</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// simple index-based iteration</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">size_t</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">wav</span><span class=\"p\">.</span><span class=\"n\">getSamplesCount</span><span class=\"p\">();</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">wav</span><span class=\"p\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"n\">maxValue</span><span class=\"p\">)</span>\n            <span class=\"n\">maxValue</span> <span class=\"o\">=</span> <span class=\"n\">wav</span><span class=\"p\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Maximum sample value: &quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">maxValue</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// iterator usage</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">Aquila</span><span class=\"o\">::</span><span class=\"n\">WaveFile</span><span class=\"o\">::</span><span class=\"n\">iterator</span> <span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">wav</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">();</span> <span class=\"n\">it</span> <span class=\"o\">!=</span> <span class=\"n\">wav</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">();</span> <span class=\"o\">++</span><span class=\"n\">it</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">it</span> <span class=\"o\">&lt;</span> <span class=\"n\">minValue</span><span class=\"p\">)</span>\n            <span class=\"n\">minValue</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">it</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Minimum sample value: &quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">minValue</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// STL algorithms work too, so the previous examples could be rewritten</span>\n    <span class=\"c1\">// using max/min_element.</span>\n    <span class=\"kt\">int</span> <span class=\"n\">limit</span> <span class=\"o\">=</span> <span class=\"mi\">5000</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">aboveLimit</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">count_if</span><span class=\"p\">(</span><span class=\"n\">wav</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">wav</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">(),</span>\n                                   <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">bind2nd</span><span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">greater</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span><span class=\"p\">(),</span> <span class=\"n\">limit</span><span class=\"p\">));</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;There are &quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">aboveLimit</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot; samples greater than &quot;</span>\n              <span class=\"o\">&lt;&lt;</span> <span class=\"n\">limit</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "slug": "iterating-over-wave-file-data",
            "content_markup_type": "markdown"
        }
    },
    {
        "pk": 9,
        "model": "articles.article",
        "fields": {
            "title": "Plotting window functions",
            "created": "2010-04-07T22:33:03Z",
            "modified": "2010-04-07T22:33:03Z",
            "content": "This is a very simple way to get a preview of window function shape. The example uses Aquila::TextPlot as a *drawing tool*. Windows are drawn as simple asterisk patterns.\r\n\r\n    :::c++\r\n    #include \"aquila/transform/Window.h\"\r\n    #include \"aquila/tools/TextPlot.h\"\r\n    \r\n    int main(int argc, char *argv[])\r\n    {\r\n        Aquila::WindowType types[] = {Aquila::WIN_RECT, Aquila::WIN_HAMMING,\r\n                                      Aquila::WIN_HANN, Aquila::WIN_BARLETT,\r\n                                      Aquila::WIN_BLACKMAN, Aquila::WIN_FLATTOP};\r\n        const char* names[] = {\"Rectangular\", \"Hamming\",\r\n                               \"Hann\", \"Barlett\",\r\n                               \"Blackman\", \"Flat-top\"};\r\n        const std::size_t length = 65;\r\n        int num = sizeof(types) / sizeof(Aquila::WindowType);\r\n    \r\n        Aquila::TextPlot plot;\r\n        for (int i = 0; i < num; ++i)\r\n        {\r\n            Aquila::Window window(types[i], length);\r\n            plot.setTitle(names[i]);\r\n            plot.plot(window.getData());\r\n        }\r\n    \r\n        return 0;\r\n    }\r\n\r\nThe windows are plotted below for comparison. Note: the rectangular window is improperly scaled at the moment and looks like it's all zeros. It isn't, that is a constant 1.\r\n\r\n\r\n    Rectangular\r\n                                                                     \r\n                                                                     \r\n                                                                     \r\n                                                                     \r\n                                                                     \r\n                                                                     \r\n                                                                     \r\n                                                                     \r\n                                                                     \r\n                                                                     \r\n                                                                     \r\n                                                                     \r\n                                                                     \r\n                                                                     \r\n                                                                     \r\n    *****************************************************************\r\n\r\n    Hamming\r\n                               ***********                           \r\n                             **           **                         \r\n                           **               **                       \r\n                          *                   *                      \r\n                        **                     **                    \r\n                       *                         *                   \r\n                      *                           *                  \r\n                     *                             **                \r\n                   **                                *               \r\n                  *                                   *              \r\n                 *                                     *             \r\n               **                                       **           \r\n              *                                           *          \r\n            **                                             **        \r\n          **                                                 **      \r\n    ******                                                     ******\r\n\r\n    Hann\r\n                               ***********                           \r\n                             **           **                         \r\n                           **               **                       \r\n                          *                   *                      \r\n                        **                     **                    \r\n                       *                         *                   \r\n                      *                           *                  \r\n                     *                             **                \r\n                   **                                *               \r\n                  *                                   *              \r\n                 *                                     *             \r\n               **                                       **           \r\n              *                                           *          \r\n            **                                             **        \r\n          **                                                 **      \r\n    ******                                                     ******\r\n\r\n    Barlett\r\n                                   ***                               \r\n                                 **   **                             \r\n                               **       **                           \r\n                             **           **                         \r\n                           **               **                       \r\n                         **                   **                     \r\n                       **                       **                   \r\n                     **                           **                 \r\n                   **                               **               \r\n                 **                                   **             \r\n               **                                       **           \r\n             **                                           **         \r\n           **                                               **       \r\n         **                                                   **     \r\n       **                                                       **   \r\n    ***                                                           ***\r\n\r\n    Blackman\r\n                                *********                            \r\n                               *         *                           \r\n                             **           **                         \r\n                            *               *                        \r\n                           *                 *                       \r\n                          *                   *                      \r\n                         *                     *                     \r\n                        *                       *                    \r\n                      **                         **                  \r\n                     *                             *                 \r\n                    *                               *                \r\n                   *                                 *               \r\n                 **                                   **             \r\n               **                                       **           \r\n            ***                                           ***        \r\n    ********                                                 ********\r\n\r\n    Flat-top\r\n                                  *****                              \r\n                                 *     *                             \r\n                                *       *                            \r\n                               *         *                           \r\n                                                                     \r\n                              *           *                          \r\n                             *             *                         \r\n                                                                     \r\n                            *               *                        \r\n                           *                 *                       \r\n                                                                     \r\n                          *                   *                      \r\n                         *                     *                     \r\n                        *                       *                    \r\n    ****              **                         **              ****\r\n        **************                             **************    \r\n",
            "_content_rendered": "<p>This is a very simple way to get a preview of window function shape. The example uses Aquila::TextPlot as a <em>drawing tool</em>. Windows are drawn as simple asterisk patterns.</p>\n<div class=\"highlight\"><pre><span class=\"cp\">#include &quot;aquila/transform/Window.h&quot;</span>\n<span class=\"cp\">#include &quot;aquila/tools/TextPlot.h&quot;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">argv</span><span class=\"p\">[])</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">Aquila</span><span class=\"o\">::</span><span class=\"n\">WindowType</span> <span class=\"n\">types</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">Aquila</span><span class=\"o\">::</span><span class=\"n\">WIN_RECT</span><span class=\"p\">,</span> <span class=\"n\">Aquila</span><span class=\"o\">::</span><span class=\"n\">WIN_HAMMING</span><span class=\"p\">,</span>\n                                  <span class=\"n\">Aquila</span><span class=\"o\">::</span><span class=\"n\">WIN_HANN</span><span class=\"p\">,</span> <span class=\"n\">Aquila</span><span class=\"o\">::</span><span class=\"n\">WIN_BARLETT</span><span class=\"p\">,</span>\n                                  <span class=\"n\">Aquila</span><span class=\"o\">::</span><span class=\"n\">WIN_BLACKMAN</span><span class=\"p\">,</span> <span class=\"n\">Aquila</span><span class=\"o\">::</span><span class=\"n\">WIN_FLATTOP</span><span class=\"p\">};</span>\n    <span class=\"k\">const</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">names</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">&quot;Rectangular&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;Hamming&quot;</span><span class=\"p\">,</span>\n                           <span class=\"s\">&quot;Hann&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;Barlett&quot;</span><span class=\"p\">,</span>\n                           <span class=\"s\">&quot;Blackman&quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;Flat-top&quot;</span><span class=\"p\">};</span>\n    <span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">size_t</span> <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"mi\">65</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">types</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">Aquila</span><span class=\"o\">::</span><span class=\"n\">WindowType</span><span class=\"p\">);</span>\n\n    <span class=\"n\">Aquila</span><span class=\"o\">::</span><span class=\"n\">TextPlot</span> <span class=\"n\">plot</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">num</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">Aquila</span><span class=\"o\">::</span><span class=\"n\">Window</span> <span class=\"n\">window</span><span class=\"p\">(</span><span class=\"n\">types</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">length</span><span class=\"p\">);</span>\n        <span class=\"n\">plot</span><span class=\"p\">.</span><span class=\"n\">setTitle</span><span class=\"p\">(</span><span class=\"n\">names</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n        <span class=\"n\">plot</span><span class=\"p\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">window</span><span class=\"p\">.</span><span class=\"n\">getData</span><span class=\"p\">());</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>The windows are plotted below for comparison. Note: the rectangular window is improperly scaled at the moment and looks like it's all zeros. It isn't, that is a constant 1.</p>\n<div class=\"highlight\"><pre><span class=\"n\">Rectangular</span>\n\n<span class=\"o\">*****************************************************************</span>\n\n<span class=\"n\">Hamming</span>\n                           <span class=\"o\">***********</span>                           \n                         <span class=\"o\">**</span>           <span class=\"o\">**</span>                         \n                       <span class=\"o\">**</span>               <span class=\"o\">**</span>                       \n                      <span class=\"o\">*</span>                   <span class=\"o\">*</span>                      \n                    <span class=\"o\">**</span>                     <span class=\"o\">**</span>                    \n                   <span class=\"o\">*</span>                         <span class=\"o\">*</span>                   \n                  <span class=\"o\">*</span>                           <span class=\"o\">*</span>                  \n                 <span class=\"o\">*</span>                             <span class=\"o\">**</span>                \n               <span class=\"o\">**</span>                                <span class=\"o\">*</span>               \n              <span class=\"o\">*</span>                                   <span class=\"o\">*</span>              \n             <span class=\"o\">*</span>                                     <span class=\"o\">*</span>             \n           <span class=\"o\">**</span>                                       <span class=\"o\">**</span>           \n          <span class=\"o\">*</span>                                           <span class=\"o\">*</span>          \n        <span class=\"o\">**</span>                                             <span class=\"o\">**</span>        \n      <span class=\"o\">**</span>                                                 <span class=\"o\">**</span>      \n<span class=\"o\">******</span>                                                     <span class=\"o\">******</span>\n\n<span class=\"n\">Hann</span>\n                           <span class=\"o\">***********</span>                           \n                         <span class=\"o\">**</span>           <span class=\"o\">**</span>                         \n                       <span class=\"o\">**</span>               <span class=\"o\">**</span>                       \n                      <span class=\"o\">*</span>                   <span class=\"o\">*</span>                      \n                    <span class=\"o\">**</span>                     <span class=\"o\">**</span>                    \n                   <span class=\"o\">*</span>                         <span class=\"o\">*</span>                   \n                  <span class=\"o\">*</span>                           <span class=\"o\">*</span>                  \n                 <span class=\"o\">*</span>                             <span class=\"o\">**</span>                \n               <span class=\"o\">**</span>                                <span class=\"o\">*</span>               \n              <span class=\"o\">*</span>                                   <span class=\"o\">*</span>              \n             <span class=\"o\">*</span>                                     <span class=\"o\">*</span>             \n           <span class=\"o\">**</span>                                       <span class=\"o\">**</span>           \n          <span class=\"o\">*</span>                                           <span class=\"o\">*</span>          \n        <span class=\"o\">**</span>                                             <span class=\"o\">**</span>        \n      <span class=\"o\">**</span>                                                 <span class=\"o\">**</span>      \n<span class=\"o\">******</span>                                                     <span class=\"o\">******</span>\n\n<span class=\"n\">Barlett</span>\n                               <span class=\"o\">***</span>                               \n                             <span class=\"o\">**</span>   <span class=\"o\">**</span>                             \n                           <span class=\"o\">**</span>       <span class=\"o\">**</span>                           \n                         <span class=\"o\">**</span>           <span class=\"o\">**</span>                         \n                       <span class=\"o\">**</span>               <span class=\"o\">**</span>                       \n                     <span class=\"o\">**</span>                   <span class=\"o\">**</span>                     \n                   <span class=\"o\">**</span>                       <span class=\"o\">**</span>                   \n                 <span class=\"o\">**</span>                           <span class=\"o\">**</span>                 \n               <span class=\"o\">**</span>                               <span class=\"o\">**</span>               \n             <span class=\"o\">**</span>                                   <span class=\"o\">**</span>             \n           <span class=\"o\">**</span>                                       <span class=\"o\">**</span>           \n         <span class=\"o\">**</span>                                           <span class=\"o\">**</span>         \n       <span class=\"o\">**</span>                                               <span class=\"o\">**</span>       \n     <span class=\"o\">**</span>                                                   <span class=\"o\">**</span>     \n   <span class=\"o\">**</span>                                                       <span class=\"o\">**</span>   \n<span class=\"o\">***</span>                                                           <span class=\"o\">***</span>\n\n<span class=\"n\">Blackman</span>\n                            <span class=\"o\">*********</span>                            \n                           <span class=\"o\">*</span>         <span class=\"o\">*</span>                           \n                         <span class=\"o\">**</span>           <span class=\"o\">**</span>                         \n                        <span class=\"o\">*</span>               <span class=\"o\">*</span>                        \n                       <span class=\"o\">*</span>                 <span class=\"o\">*</span>                       \n                      <span class=\"o\">*</span>                   <span class=\"o\">*</span>                      \n                     <span class=\"o\">*</span>                     <span class=\"o\">*</span>                     \n                    <span class=\"o\">*</span>                       <span class=\"o\">*</span>                    \n                  <span class=\"o\">**</span>                         <span class=\"o\">**</span>                  \n                 <span class=\"o\">*</span>                             <span class=\"o\">*</span>                 \n                <span class=\"o\">*</span>                               <span class=\"o\">*</span>                \n               <span class=\"o\">*</span>                                 <span class=\"o\">*</span>               \n             <span class=\"o\">**</span>                                   <span class=\"o\">**</span>             \n           <span class=\"o\">**</span>                                       <span class=\"o\">**</span>           \n        <span class=\"o\">***</span>                                           <span class=\"o\">***</span>        \n<span class=\"o\">********</span>                                                 <span class=\"o\">********</span>\n\n<span class=\"n\">Flat</span><span class=\"o\">-</span><span class=\"n\">top</span>\n                              <span class=\"o\">*****</span>                              \n                             <span class=\"o\">*</span>     <span class=\"o\">*</span>                             \n                            <span class=\"o\">*</span>       <span class=\"o\">*</span>                            \n                           <span class=\"o\">*</span>         <span class=\"o\">*</span>\n\n                          <span class=\"o\">*</span>           <span class=\"o\">*</span>                          \n                         <span class=\"o\">*</span>             <span class=\"o\">*</span>\n\n                        <span class=\"o\">*</span>               <span class=\"o\">*</span>                        \n                       <span class=\"o\">*</span>                 <span class=\"o\">*</span>\n\n                      <span class=\"o\">*</span>                   <span class=\"o\">*</span>                      \n                     <span class=\"o\">*</span>                     <span class=\"o\">*</span>                     \n                    <span class=\"o\">*</span>                       <span class=\"o\">*</span>                    \n<span class=\"o\">****</span>              <span class=\"o\">**</span>                         <span class=\"o\">**</span>              <span class=\"o\">****</span>\n    <span class=\"o\">**************</span>                             <span class=\"o\">**************</span>\n</pre></div>",
            "slug": "plotting-window-functions",
            "content_markup_type": "markdown"
        }
    },
    {
        "pk": 8,
        "model": "articles.article",
        "fields": {
            "title": "Wave file information",
            "created": "2010-04-07T22:32:43Z",
            "modified": "2010-04-07T22:32:43Z",
            "content": "`Aquila::WaveFile` class allows accessing audio data stored in a .wav file. Apart from reading audio samples, you can query the `WaveFile` object for header meta information.\r\n\r\n    :::c++\r\n    #include \"aquila/source/WaveFile.h\"\r\n    #include <iostream>\r\n\r\n    int main(int argc, char *argv[])\r\n    {\r\n        if (argc < 2)\r\n        {\r\n            std::cout << \"Usage: wave_info <FILENAME>\" << std::endl;\r\n            return 1;\r\n        }\r\n        Aquila::WaveFile wav(argv[1]);\r\n        std::cout << \"Filename: \"           << wav.getFilename();\r\n        std::cout << \"\\nLength: \"           << wav.getAudioLength()     << \" ms\";\r\n        std::cout << \"\\nSample frequency: \" << wav.getSampleFrequency() << \" Hz\";\r\n        std::cout << \"\\nChannels: \"         << wav.getChannelsNum();\r\n        std::cout << \"\\nByte rate: \"        << wav.getBytesPerSec()/1024 << \" kB/s\";\r\n        std::cout << \"\\nBits per sample: \"  << wav.getBitsPerSample() << \"b\\n\";\r\n\r\n        return 0;\r\n    }\r\n",
            "_content_rendered": "<p><code>Aquila::WaveFile</code> class allows accessing audio data stored in a .wav file. Apart from reading audio samples, you can query the <code>WaveFile</code> object for header meta information.</p>\n<div class=\"highlight\"><pre><span class=\"cp\">#include &quot;aquila/source/WaveFile.h&quot;</span>\n<span class=\"cp\">#include &lt;iostream&gt;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">argv</span><span class=\"p\">[])</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">argc</span> <span class=\"o\">&lt;</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Usage: wave_info &lt;FILENAME&gt;&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">Aquila</span><span class=\"o\">::</span><span class=\"n\">WaveFile</span> <span class=\"n\">wav</span><span class=\"p\">(</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]);</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Filename: &quot;</span>           <span class=\"o\">&lt;&lt;</span> <span class=\"n\">wav</span><span class=\"p\">.</span><span class=\"n\">getFilename</span><span class=\"p\">();</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;</span><span class=\"se\">\\n</span><span class=\"s\">Length: &quot;</span>           <span class=\"o\">&lt;&lt;</span> <span class=\"n\">wav</span><span class=\"p\">.</span><span class=\"n\">getAudioLength</span><span class=\"p\">()</span>     <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot; ms&quot;</span><span class=\"p\">;</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;</span><span class=\"se\">\\n</span><span class=\"s\">Sample frequency: &quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">wav</span><span class=\"p\">.</span><span class=\"n\">getSampleFrequency</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot; Hz&quot;</span><span class=\"p\">;</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;</span><span class=\"se\">\\n</span><span class=\"s\">Channels: &quot;</span>         <span class=\"o\">&lt;&lt;</span> <span class=\"n\">wav</span><span class=\"p\">.</span><span class=\"n\">getChannelsNum</span><span class=\"p\">();</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;</span><span class=\"se\">\\n</span><span class=\"s\">Byte rate: &quot;</span>        <span class=\"o\">&lt;&lt;</span> <span class=\"n\">wav</span><span class=\"p\">.</span><span class=\"n\">getBytesPerSec</span><span class=\"p\">()</span><span class=\"o\">/</span><span class=\"mi\">1024</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot; kB/s&quot;</span><span class=\"p\">;</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;</span><span class=\"se\">\\n</span><span class=\"s\">Bits per sample: &quot;</span>  <span class=\"o\">&lt;&lt;</span> <span class=\"n\">wav</span><span class=\"p\">.</span><span class=\"n\">getBitsPerSample</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;b</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "slug": "wave-file-information",
            "content_markup_type": "markdown"
        }
    },
    {
        "pk": 7,
        "model": "articles.article",
        "fields": {
            "title": "Autoupdated docs",
            "created": "2010-09-01T20:10:55Z",
            "modified": "2010-09-01T20:10:55Z",
            "content": "The [API documentation](http://aquila-dsp.org/docs/) is now automatically updated from source code twice a day.",
            "_content_rendered": "<p>The <a href=\"http://aquila-dsp.org/docs/\">API documentation</a> is now automatically updated from source code twice a day.</p>",
            "slug": "autoupdated-docs",
            "content_markup_type": "markdown"
        }
    },
    {
        "pk": 6,
        "model": "articles.article",
        "fields": {
            "title": "API documentation is here!",
            "created": "2010-08-08T13:49:23Z",
            "modified": "2010-08-08T13:49:23Z",
            "content": "An autogenerated [API documentation](http://aquila-dsp.org/docs/) is now integrated into the website. The docs are generated with Doxygen and at the moment are manually updated. I'm working on a way to automatically update documentation after each Git commit.",
            "_content_rendered": "<p>An autogenerated <a href=\"http://aquila-dsp.org/docs/\">API documentation</a> is now integrated into the website. The docs are generated with Doxygen and at the moment are manually updated. I'm working on a way to automatically update documentation after each Git commit.</p>",
            "slug": "api-documentation-here",
            "content_markup_type": "markdown"
        }
    },
    {
        "pk": 5,
        "model": "articles.article",
        "fields": {
            "title": "Feature overview",
            "created": "2010-05-14T19:59:44Z",
            "modified": "2010-05-14T19:59:44Z",
            "content": "A new [feature overview](http://aquila-dsp.org/features/) page appeared, listing Aquila's most important highlights. Some features are 100% done, some need porting and some are now only general ideas. There is still work to do!",
            "_content_rendered": "<p>A new <a href=\"http://aquila-dsp.org/features/\">feature overview</a> page appeared, listing Aquila's most important highlights. Some features are 100% done, some need porting and some are now only general ideas. There is still work to do!</p>",
            "slug": "feature-overview",
            "content_markup_type": "markdown"
        }
    },
    {
        "pk": 4,
        "model": "articles.article",
        "fields": {
            "title": "Aquila is now on Facebook!",
            "created": "2010-05-06T19:24:29Z",
            "modified": "2010-05-06T19:24:29Z",
            "content": "I've set up a [Facebook page](http://www.facebook.com/pages/Aquila-DSP/120691261290307) for **Aquila**. If you like the library, or if you are interested in **Digital Signal Processing**, follow us on Facebook!",
            "_content_rendered": "<p>I've set up a <a href=\"http://www.facebook.com/pages/Aquila-DSP/120691261290307\">Facebook page</a> for <strong>Aquila</strong>. If you like the library, or if you are interested in <strong>Digital Signal Processing</strong>, follow us on Facebook!</p>",
            "slug": "aquila-now-on-facebook",
            "content_markup_type": "markdown"
        }
    },
    {
        "pk": 3,
        "model": "articles.article",
        "fields": {
            "title": "FFT examples",
            "created": "2010-04-29T00:07:15Z",
            "modified": "2010-04-29T00:07:15Z",
            "content": "Two new **FFT**-related examples appeared. [Simpler one](http://aquila-dsp.org/examples/simple-fft-example/) shows how to calculate the spectrum, and [another one](http://aquila-dsp.org/examples/frequency-domain-filtering-with-fft/) demonstrates frequency-domain signal filtering. \r\n\r\nThe [window functions example](http://aquila-dsp.org/examples/plotting-window-functions/) was simplified, thanks to the TextPlot class.",
            "_content_rendered": "<p>Two new <strong>FFT</strong>-related examples appeared. <a href=\"http://aquila-dsp.org/examples/simple-fft-example/\">Simpler one</a> shows how to calculate the spectrum, and <a href=\"http://aquila-dsp.org/examples/frequency-domain-filtering-with-fft/\">another one</a> demonstrates frequency-domain signal filtering. </p>\n<p>The <a href=\"http://aquila-dsp.org/examples/plotting-window-functions/\">window functions example</a> was simplified, thanks to the TextPlot class.</p>",
            "slug": "fft-examples",
            "content_markup_type": "markdown"
        }
    },
    {
        "pk": 2,
        "model": "articles.article",
        "fields": {
            "title": "Site update",
            "created": "2010-04-11T22:14:59Z",
            "modified": "2010-04-11T22:14:59Z",
            "content": "In the [about](/about/) section, download links for different logo images appeared. Images are licensed under a [Creative Commons license](http://creativecommons.org/licenses/by-nd/3.0/). Another minor update is the [sitemap](/sitemap/) link in footer.",
            "_content_rendered": "<p>In the <a href=\"/about/\">about</a> section, download links for different logo images appeared. Images are licensed under a <a href=\"http://creativecommons.org/licenses/by-nd/3.0/\">Creative Commons license</a>. Another minor update is the <a href=\"/sitemap/\">sitemap</a> link in footer.</p>",
            "slug": "site-update",
            "content_markup_type": "markdown"
        }
    },
    {
        "pk": 1,
        "model": "articles.article",
        "fields": {
            "title": "aquila-dsp.org now online!",
            "created": "2010-04-07T22:32:07Z",
            "modified": "2010-04-07T22:32:07Z",
            "content": "So it begins. **Aquila** goes public. With the library still in development, this site may seem to be released too early. Well, it will serve as a motivation for me to work harder on the code ;)",
            "_content_rendered": "<p>So it begins. <strong>Aquila</strong> goes public. With the library still in development, this site may seem to be released too early. Well, it will serve as a motivation for me to work harder on the code ;)</p>",
            "slug": "aquila-dsporg-now-online",
            "content_markup_type": "markdown"
        }
    }
]